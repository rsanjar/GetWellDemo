// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace GetWell.Data.Model
{
    public partial class GetWellContext : DbContext
    {
        public GetWellContext()
        {
        }

        public GetWellContext(DbContextOptions<GetWellContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdminAccount> AdminAccounts { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AppointmentProfile> AppointmentProfiles { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Clinic> Clinics { get; set; }
        public virtual DbSet<ClinicAccount> ClinicAccounts { get; set; }
        public virtual DbSet<ClinicDiscount> ClinicDiscounts { get; set; }
        public virtual DbSet<ClinicDoctor> ClinicDoctors { get; set; }
        public virtual DbSet<ClinicDoctorAccount> ClinicDoctorAccounts { get; set; }
        public virtual DbSet<ClinicDoctorEvent> ClinicDoctorEvents { get; set; }
        public virtual DbSet<ClinicDoctorWorkDay> ClinicDoctorWorkDays { get; set; }
        public virtual DbSet<ClinicGallery> ClinicGalleries { get; set; }
        public virtual DbSet<ClinicPhone> ClinicPhones { get; set; }
        public virtual DbSet<ClinicReview> ClinicReviews { get; set; }
        public virtual DbSet<ClinicRole> ClinicRoles { get; set; }
        public virtual DbSet<ClinicWorkDay> ClinicWorkDays { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorPhone> DoctorPhones { get; set; }
        public virtual DbSet<DoctorProfile> DoctorProfiles { get; set; }
        public virtual DbSet<DoctorSpecialty> DoctorSpecialties { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientAccount> PatientAccounts { get; set; }
        public virtual DbSet<PatientFavoriteClinic> PatientFavoriteClinics { get; set; }
        public virtual DbSet<PatientFavoriteDoctor> PatientFavoriteDoctors { get; set; }
        public virtual DbSet<PatientProfile> PatientProfiles { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<ServiceClinic> ServiceClinics { get; set; }
        public virtual DbSet<ServiceClinicDoctor> ServiceClinicDoctors { get; set; }
        public virtual DbSet<Specialty> Specialties { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<WeekDay> WeekDays { get; set; }
        public virtual DbSet<ZipCode> ZipCodes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Cyrillic_General_CI_AS");

            modelBuilder.Entity<AdminAccount>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SmsActivationCode).HasDefaultValueSql("(round(rand()*(100000),(0)))");

                entity.Property(e => e.UniqueKey).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.Property(e => e.ConfirmationCode).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.PatientID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Appointment_Patient");

                entity.HasOne(d => d.ServiceClinicDoctor)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.ServiceClinicDoctorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Appointment_ServiceClinicDoctors");
            });

            modelBuilder.Entity<AppointmentProfile>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.HasOne(d => d.Appointment)
                    .WithOne(p => p.AppointmentProfile)
                    .HasForeignKey<AppointmentProfile>(d => d.AppointmentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppointmentProfile_Appointment");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Cities)
                    .HasForeignKey(d => d.CountryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Country");
            });

            modelBuilder.Entity<Clinic>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsPrivate).HasDefaultValueSql("((1))");

                entity.Property(e => e.UniqueKey).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ParentDepartment)
                    .WithMany(p => p.InverseParentDepartment)
                    .HasForeignKey(d => d.ParentDepartmentID)
                    .HasConstraintName("FK_Clinic_Clinic");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Clinics)
                    .HasForeignKey(d => d.RegionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinic_Region");
            });

            modelBuilder.Entity<ClinicAccount>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SmsActivationCode).HasDefaultValueSql("(round(rand()*(100000),(0)))");

                entity.Property(e => e.UniqueKey).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Clinic)
                    .WithOne(p => p.ClinicAccount)
                    .HasForeignKey<ClinicAccount>(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicAccount_Clinic");
            });

            modelBuilder.Entity<ClinicDiscount>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ServiceClinic)
                    .WithMany(p => p.ClinicDiscounts)
                    .HasForeignKey(d => d.ServiceClinicID)
                    .HasConstraintName("FK_ClinicDiscount_ClinicDiscount");
            });

            modelBuilder.Entity<ClinicDoctor>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ClinicDoctors)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicDoctors_Clinic");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.ClinicDoctors)
                    .HasForeignKey(d => d.DoctorID)
                    .HasConstraintName("FK_ClinicDoctors_Doctor");
            });

            modelBuilder.Entity<ClinicDoctorAccount>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SmsActivationCode).HasDefaultValueSql("(round(rand()*(100000),(0)))");

                entity.Property(e => e.UniqueKey).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.ClinicDoctor)
                    .WithOne(p => p.ClinicDoctorAccount)
                    .HasForeignKey<ClinicDoctorAccount>(d => d.ClinicDoctorID)
                    .HasConstraintName("FK_ClinicDoctorAccount_ClinicDoctors");
            });

            modelBuilder.Entity<ClinicDoctorEvent>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.HasOne(d => d.ClinicDoctor)
                    .WithMany(p => p.ClinicDoctorEvents)
                    .HasForeignKey(d => d.ClinicDoctorID)
                    .HasConstraintName("FK_ClinicDoctorEvent_ClinicDoctors");
            });

            modelBuilder.Entity<ClinicDoctorWorkDay>(entity =>
            {
                entity.HasOne(d => d.ClinicDoctor)
                    .WithMany(p => p.ClinicDoctorWorkDays)
                    .HasForeignKey(d => d.ClinicDoctorID)
                    .HasConstraintName("FK_ClinicDoctorWorkDay_ClinicDoctors");

                entity.HasOne(d => d.WeekDay)
                    .WithMany(p => p.ClinicDoctorWorkDays)
                    .HasForeignKey(d => d.WeekDayID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClinicDoctorWorkDay_WeekDay");
            });

            modelBuilder.Entity<ClinicGallery>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ClinicGalleries)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicGallery_Clinic");
            });

            modelBuilder.Entity<ClinicPhone>(entity =>
            {
                entity.Property(e => e.IsMobile).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ClinicPhones)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicPhones_Clinic");
            });

            modelBuilder.Entity<ClinicReview>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Rating).HasDefaultValueSql("((10))");

                entity.Property(e => e.ReviewLanguage).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ClinicReviews)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicReview_Clinic");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.ClinicReviews)
                    .HasForeignKey(d => d.PatientID)
                    .HasConstraintName("FK_ClinicReview_Patient");
            });

            modelBuilder.Entity<ClinicRole>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ClinicWorkDay>(entity =>
            {
                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ClinicWorkDays)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_ClinicWorkDay_Clinic");

                entity.HasOne(d => d.WeekDay)
                    .WithMany(p => p.ClinicWorkDays)
                    .HasForeignKey(d => d.WeekDayID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClinicWorkDay_WeekDay");
            });

            modelBuilder.Entity<Doctor>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DoctorPhone>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsMobile).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.DoctorPhones)
                    .HasForeignKey(d => d.DoctorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DoctorPhones_Doctor");
            });

            modelBuilder.Entity<DoctorProfile>(entity =>
            {
                entity.HasOne(d => d.Doctor)
                    .WithOne(p => p.DoctorProfile)
                    .HasForeignKey<DoctorProfile>(d => d.DoctorID)
                    .HasConstraintName("FK_DoctorProfile_Doctor");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.DoctorProfiles)
                    .HasForeignKey(d => d.RegionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DoctorProfile_Region");
            });

            modelBuilder.Entity<DoctorSpecialty>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.DoctorSpecialties)
                    .HasForeignKey(d => d.DoctorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DoctorSpecialty_Doctor");

                entity.HasOne(d => d.Specialty)
                    .WithMany(p => p.DoctorSpecialties)
                    .HasForeignKey(d => d.SpecialtyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DoctorSpecialty_Specialty");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.NewsLanguage).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Patient>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Patients)
                    .HasForeignKey(d => d.CityID)
                    .HasConstraintName("FK_Patient_City");
            });

            modelBuilder.Entity<PatientAccount>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SmsActivationCode).HasDefaultValueSql("(round(rand()*(100000),(0)))");

                entity.Property(e => e.UniqueKey).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Patient)
                    .WithOne(p => p.PatientAccount)
                    .HasForeignKey<PatientAccount>(d => d.PatientID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatientAccount_Patient");
            });

            modelBuilder.Entity<PatientFavoriteClinic>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.PatientFavoriteClinics)
                    .HasForeignKey(d => d.ClinicID)
                    .HasConstraintName("FK_PatientFavoriteClinics_Clinic");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.PatientFavoriteClinics)
                    .HasForeignKey(d => d.PatientID)
                    .HasConstraintName("FK_PatientFavoriteClinics_Patient");
            });

            modelBuilder.Entity<PatientFavoriteDoctor>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ClinicDoctor)
                    .WithMany(p => p.PatientFavoriteDoctors)
                    .HasForeignKey(d => d.ClinicDoctorID)
                    .HasConstraintName("FK_PatientFavoriteDoctor_ClinicDoctors");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.PatientFavoriteDoctors)
                    .HasForeignKey(d => d.PatientID)
                    .HasConstraintName("FK_PatientFavoriteDoctor_Patient");
            });

            modelBuilder.Entity<PatientProfile>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.HasOne(d => d.Patient)
                    .WithOne(p => p.PatientProfile)
                    .HasForeignKey<PatientProfile>(d => d.PatientID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatientProfile_Patient");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PatientProfiles)
                    .HasForeignKey(d => d.RegionID)
                    .HasConstraintName("FK_PatientProfile_Region");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Regions)
                    .HasForeignKey(d => d.CityID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Region_City");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ServiceCategory)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ServiceCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_ServiceCategory");
            });

            modelBuilder.Entity<ServiceCategory>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ServiceCategories)
                    .HasForeignKey(d => d.CategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCategory_Category");

                entity.HasOne(d => d.Title)
                    .WithMany(p => p.ServiceCategories)
                    .HasForeignKey(d => d.TitleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCategory_Title");
            });

            modelBuilder.Entity<ServiceClinic>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceClinics)
                    .HasForeignKey(d => d.ServiceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceClinic_Service");
            });

            modelBuilder.Entity<ServiceClinicDoctor>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ClinicDoctor)
                    .WithMany(p => p.ServiceClinicDoctors)
                    .HasForeignKey(d => d.ClinicDoctorID)
                    .HasConstraintName("FK_ServiceClinicDoctors_ClinicDoctors");

                entity.HasOne(d => d.ServiceClinic)
                    .WithMany(p => p.ServiceClinicDoctors)
                    .HasForeignKey(d => d.ServiceClinicID)
                    .HasConstraintName("FK_ServiceClinicDoctors_ServiceClinic");
            });

            modelBuilder.Entity<Specialty>(entity =>
            {
                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((10))");
            });

            modelBuilder.Entity<WeekDay>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ZipCode>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.ZipCodes)
                    .HasForeignKey(d => d.RegionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZipCode_Region");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}